/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ETHlessTransferInterface extends ethers.utils.Interface {
    functions: {
        'allowance(address,address)': FunctionFragment;
        'approve(address,uint256)': FunctionFragment;
        'balanceOf(address)': FunctionFragment;
        'chainID()': FunctionFragment;
        'checkSig(address,address,uint256,uint256,uint256,bytes)': FunctionFragment;
        'decimals()': FunctionFragment;
        'decreaseAllowance(address,uint256)': FunctionFragment;
        'increaseAllowance(address,uint256)': FunctionFragment;
        'name()': FunctionFragment;
        'symbol()': FunctionFragment;
        'totalSupply()': FunctionFragment;
        'transfer(address,address,uint256,uint256,uint256,bytes)': FunctionFragment;
        'transferFrom(address,address,uint256)': FunctionFragment;
        'transferHash(address,address,uint256,uint256,uint256,bytes)': FunctionFragment;
    };

    encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
    encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
    encodeFunctionData(functionFragment: 'chainID', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'checkSig',
        values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike],
    ): string;
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
    encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'name', values?: undefined): string;
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
    encodeFunctionData(
        functionFragment: 'transfer',
        values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike],
    ): string;
    encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
    encodeFunctionData(
        functionFragment: 'transferHash',
        values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike],
    ): string;

    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainID', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'checkSig', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferHash', data: BytesLike): Result;

    events: {
        'Approval(address,address,uint256)': EventFragment;
        'Transfer(address,address,uint256)': EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export class ETHlessTransfer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: ETHlessTransferInterface;

    functions: {
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        chainID(overrides?: CallOverrides): Promise<[BigNumber]>;

        checkSig(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[string, string]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        'transfer(address,address,uint256,uint256,uint256,bytes)'(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        'transfer(address,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferHash(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[string] & { success: string }>;
    };

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    checkSig(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        fee: BigNumberish,
        nonce: BigNumberish,
        sig: BytesLike,
        overrides?: CallOverrides,
    ): Promise<[string, string]>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'transfer(address,address,uint256,uint256,uint256,bytes)'(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        fee: BigNumberish,
        nonce: BigNumberish,
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferHash(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        fee: BigNumberish,
        nonce: BigNumberish,
        sig: BytesLike,
        overrides?: CallOverrides,
    ): Promise<string>;

    callStatic: {
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        chainID(overrides?: CallOverrides): Promise<BigNumber>;

        checkSig(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[string, string]>;

        decimals(overrides?: CallOverrides): Promise<number>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        name(overrides?: CallOverrides): Promise<string>;

        symbol(overrides?: CallOverrides): Promise<string>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        'transfer(address,address,uint256,uint256,uint256,bytes)'(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        'transfer(address,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transferHash(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<string>;
    };

    filters: {
        Approval(
            owner?: string | null,
            spender?: string | null,
            value?: null,
        ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

        Transfer(
            from?: string | null,
            to?: string | null,
            value?: null,
        ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
    };

    estimateGas: {
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        chainID(overrides?: CallOverrides): Promise<BigNumber>;

        checkSig(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        'transfer(address,address,uint256,uint256,uint256,bytes)'(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        'transfer(address,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferHash(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        checkSig(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'transfer(address,address,uint256,uint256,uint256,bytes)'(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        'transfer(address,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferHash(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            fee: BigNumberish,
            nonce: BigNumberish,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;
    };
}
