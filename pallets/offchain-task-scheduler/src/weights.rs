
//! Autogenerated weights for `crate`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-17, STEPS: `50`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `pop-os`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/creditcoin-node
// benchmark
// pallet
// --chain
// dev
// --steps=50
// --repeat=1
// --pallet
// crate
// --extrinsic=*
// --execution
// wasm
// --wasm-execution=compiled
// --heap-pages=10000
// --output
// ./pallets/offchain-task-scheduler/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `crate`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: TaskScheduler PendingTasks (r:1025 w:1024)
	/// Proof: TaskScheduler PendingTasks (max_values: None, max_size: Some(1276), added: 3751, mode: MaxEncodedLen)
	/// The range of component `t` is `[0, 1024]`.
	fn on_initialize(t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `65 + t * (293 ±0)`
		//  Estimated: `3751 + t * (3751 ±0)`
		// Minimum execution time: 5_170 nanoseconds.
		Weight::from_parts(5_170_000, 3751)
			// Standard Error: 38_297
			.saturating_add(Weight::from_ref_time(9_449_923).saturating_mul(t.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_proof_size(3751).saturating_mul(t.into()))
	}
	/// Storage: TaskScheduler Authorities (r:1 w:0)
	/// Proof: TaskScheduler Authorities (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: TaskScheduler PendingTasks (r:0 w:1)
	/// Proof: TaskScheduler PendingTasks (max_values: None, max_size: Some(1276), added: 3751, mode: MaxEncodedLen)
	fn submit_output() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `2523`
		// Minimum execution time: 16_210 nanoseconds.
		Weight::from_parts(16_210_000, 2523)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
