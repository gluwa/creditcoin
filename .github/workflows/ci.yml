name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main, testnet, dev]
  pull_request:
    branches: [main, testnet, dev]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build -t gluwa/creditcoin-substrate .

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-03-21
          profile: minimal
          override: true
          components: rustfmt

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-03-21
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1

      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings -A clippy::too_many_arguments -A clippy::type_complexity

  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set-Up
        run: |
          sudo apt-get update
          sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-03-21
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Check Build
        run: |
          SKIP_WASM_BUILD=1 cargo check --release

      - name: Check Build for Benchmarking
        run: |
          SKIP_WASM_BUILD=1 cargo check --features=runtime-benchmarks --release

  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set-Up
        run: |
          sudo apt-get update
          sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-03-21
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Configure flags for collecting coverage
        run: |
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
          echo "RUSTFLAGS=-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests" >> $GITHUB_ENV
          echo "RUSTDOCFLAGS=-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests" >> $GITHUB_ENV

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- --test-threads 1
        env:
          CARGO_INCREMENTAL: ${{ env.CARGO_INCREMENTAL }}
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }}
          SKIP_WASM_BUILD: 1
      - id: coverage
        uses: actions-rs/grcov@v0.1
        with:
          config: .grcov.yml

      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ steps.coverage.outputs.report }}
          fail_ci_if_error: true
          verbose: true

  integration-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set-Up
        run: |
          sudo apt-get update
          sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-03-21
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Build SUT
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Start SUT
        run: |
          MINING_KEY=$(docker run docker.io/parity/subkey:latest generate | grep "SS58 Address" | tr -d ' ' | cut -f2 -d':')

          if [ -z "$MINING_KEY" ]; then
            echo "ERROR: Problem generating mining key"
            exit 1
          fi

          echo "INFO: MINING_KEY=$MINING_KEY"
          ./target/release/creditcoin-node --dev --mining-key $MINING_KEY &

      - name: Run integration test
        run: |
          # remove pre-installed packages
          sudo apt remove npm nodejs

          # Install Node.js 16.x from upstream b/c polkadot/jest can't work withh old versions
          curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -

          sudo apt-get install -y nodejs
          sudo npm install -g yarn

          pushd integration-tests/

          # prepare typescript environment and wait for creditcoin-node to initialize
          ./prepare-devel-env.sh

          yarn test

          # if all went well kill the node. Otherwise GitHub Actions would exit on the
          # previous step killing everything and we don't have to worry about
          # dangling processes
          killall -9 creditcoin-node

  benchmark:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set-Up
        run: |
          sudo apt-get update
          sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-03-21
          target: wasm32-unknown-unknown
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Build benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features runtime-benchmarks

      - name: Run benchmarks
        run: |
          ./target/release/creditcoin-node benchmark --pallet "*" --extrinsic "*"
