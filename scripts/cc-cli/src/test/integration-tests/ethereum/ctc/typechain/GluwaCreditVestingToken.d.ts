/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GluwaCreditVestingTokenInterface extends ethers.utils.Interface {
  functions: {
    "recordSales730Days(address[],uint256[])": FunctionFragment;
    "VestingStartDate()": FunctionFragment;
    "name()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "vestedBalanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "purchasedBalanceOf365Days(address)": FunctionFragment;
    "exchange(uint256,string)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vestedBalanceOf183Days(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "recordSales1095Days(address[],uint256[])": FunctionFragment;
    "vestedBalanceOf365Days(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "purchasedBalanceOf2190Days(address)": FunctionFragment;
    "recordSales183Days(address[],uint256[])": FunctionFragment;
    "recordSale365Days(address,uint256)": FunctionFragment;
    "vestedBalanceOf730Days(address)": FunctionFragment;
    "purchasedBalanceOf(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "finalizeSales()": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "vestedBalanceOf2190Days(address)": FunctionFragment;
    "purchasedBalanceOf730Days(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "recordSale183Days(address,uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "creditcoinSalesLimit()": FunctionFragment;
    "vestedBalanceOf1095Days(address)": FunctionFragment;
    "creditcoinLimitInFrac()": FunctionFragment;
    "recordSale2190Days(address,uint256)": FunctionFragment;
    "recordSale730Days(address,uint256)": FunctionFragment;
    "purchasedBalanceOf1095Days(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "startVesting()": FunctionFragment;
    "recordSales2190Days(address[],uint256[])": FunctionFragment;
    "purchasedBalanceOf183Days(address)": FunctionFragment;
    "IsSalesFinalized()": FunctionFragment;
    "recordSales365Days(address[],uint256[])": FunctionFragment;
    "recordSale1095Days(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "recordSales730Days",
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "VestingStartDate",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "vestedBalanceOf",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedBalanceOf365Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "vestedBalanceOf183Days",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordSales1095Days",
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "vestedBalanceOf365Days",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "purchasedBalanceOf2190Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "recordSales183Days",
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "recordSale365Days",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "vestedBalanceOf730Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedBalanceOf",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finalizeSales",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "vestedBalanceOf2190Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedBalanceOf730Days",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordSale183Days",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "creditcoinSalesLimit",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "vestedBalanceOf1095Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "creditcoinLimitInFrac",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "recordSale2190Days",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "recordSale730Days",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedBalanceOf1095Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "startVesting",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "recordSales2190Days",
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedBalanceOf183Days",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "IsSalesFinalized",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "recordSales365Days",
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "recordSale1095Days",
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: "recordSales730Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "VestingStartDate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedBalanceOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBalanceOf365Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedBalanceOf183Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordSales1095Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedBalanceOf365Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBalanceOf2190Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSales183Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSale365Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedBalanceOf730Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBalanceOf",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSales",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedBalanceOf2190Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBalanceOf730Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordSale183Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditcoinSalesLimit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedBalanceOf1095Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditcoinLimitInFrac",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSale2190Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSale730Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBalanceOf1095Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVesting",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSales2190Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedBalanceOf183Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsSalesFinalized",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSales365Days",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSale1095Days",
    data: BytesLike,
  ): Result;

  events: {
    "Exchange(address,uint256,string)": EventFragment;
    "Burnt(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export type ExchangeEvent = TypedEvent<
  [string, BigNumber, string] & {
    from: string;
    value: BigNumber;
    sighash: string;
  }
>;

export type BurntEvent = TypedEvent<
  [string, BigNumber] & { from: string; value: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export class GluwaCreditVestingToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GluwaCreditVestingTokenInterface;

  functions: {
    recordSales730Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    VestingStartDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vestedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    totalSupply(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    purchasedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    exchange(
      value: BigNumberish,
      sighash: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vestedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    recordSales1095Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vestedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchasedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    recordSales183Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    recordSale365Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vestedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    purchasedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    finalizeSales(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vestedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    purchasedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    recordSale183Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    creditcoinSalesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    creditcoinLimitInFrac(overrides?: CallOverrides): Promise<[BigNumber]>;

    recordSale2190Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    recordSale730Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchasedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    startVesting(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    recordSales2190Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchasedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    IsSalesFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    recordSales365Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    recordSale1095Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  recordSales730Days(
    tokenHolders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  VestingStartDate(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vestedBalanceOf(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  purchasedBalanceOf365Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  exchange(
    value: BigNumberish,
    sighash: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vestedBalanceOf183Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  recordSales1095Days(
    tokenHolders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vestedBalanceOf365Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  burn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchasedBalanceOf2190Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  recordSales183Days(
    tokenHolders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  recordSale365Days(
    tokenHolder: string,
    numCoins: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vestedBalanceOf730Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  purchasedBalanceOf(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalizeSales(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  burnFrom(
    from: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vestedBalanceOf2190Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  purchasedBalanceOf730Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  recordSale183Days(
    tokenHolder: string,
    numCoins: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  creditcoinSalesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  vestedBalanceOf1095Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  creditcoinLimitInFrac(overrides?: CallOverrides): Promise<BigNumber>;

  recordSale2190Days(
    tokenHolder: string,
    numCoins: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  recordSale730Days(
    tokenHolder: string,
    numCoins: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchasedBalanceOf1095Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  startVesting(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  recordSales2190Days(
    tokenHolders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchasedBalanceOf183Days(
    tokenHolder: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  IsSalesFinalized(overrides?: CallOverrides): Promise<boolean>;

  recordSales365Days(
    tokenHolders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  recordSale1095Days(
    tokenHolder: string,
    numCoins: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    recordSales730Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    VestingStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    vestedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    exchange(
      value: BigNumberish,
      sighash: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    vestedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    recordSales1095Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    vestedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    purchasedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    recordSales183Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    recordSale365Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    vestedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    purchasedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeSales(overrides?: CallOverrides): Promise<void>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    vestedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    purchasedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    recordSale183Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    creditcoinSalesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vestedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    creditcoinLimitInFrac(overrides?: CallOverrides): Promise<BigNumber>;

    recordSale2190Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    recordSale730Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    purchasedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    startVesting(overrides?: CallOverrides): Promise<void>;

    recordSales2190Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    purchasedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    IsSalesFinalized(overrides?: CallOverrides): Promise<boolean>;

    recordSales365Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    recordSale1095Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "Exchange(address,uint256,string)"(
      from?: string | null,
      value?: null,
      sighash?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { from: string; value: BigNumber; sighash: string }
    >;

    Exchange(
      from?: string | null,
      value?: null,
      sighash?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { from: string; value: BigNumber; sighash: string }
    >;

    "Burnt(address,uint256)"(
      from?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    Burnt(
      from?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;
  };

  estimateGas: {
    recordSales730Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    VestingStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vestedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    exchange(
      value: BigNumberish,
      sighash: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vestedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    recordSales1095Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vestedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchasedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    recordSales183Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    recordSale365Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vestedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    purchasedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeSales(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vestedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    purchasedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    recordSale183Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    creditcoinSalesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vestedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    creditcoinLimitInFrac(overrides?: CallOverrides): Promise<BigNumber>;

    recordSale2190Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    recordSale730Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchasedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    startVesting(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    recordSales2190Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchasedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    IsSalesFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    recordSales365Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    recordSale1095Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    recordSales730Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    VestingStartDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vestedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchasedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    exchange(
      value: BigNumberish,
      sighash: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vestedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordSales1095Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vestedBalanceOf365Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchasedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    recordSales183Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    recordSale365Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vestedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    purchasedBalanceOf(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    finalizeSales(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vestedBalanceOf2190Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    purchasedBalanceOf730Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordSale183Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    creditcoinSalesLimit(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vestedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    creditcoinLimitInFrac(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    recordSale2190Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    recordSale730Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchasedBalanceOf1095Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    startVesting(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    recordSales2190Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchasedBalanceOf183Days(
      tokenHolder: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    IsSalesFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordSales365Days(
      tokenHolders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    recordSale1095Days(
      tokenHolder: string,
      numCoins: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
